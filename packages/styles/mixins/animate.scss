@mixin animated($animationSpeed: null) {
  // local vars
  --animate-duration: 1s;
  --animate-delay: 1s;
  --animate-repeat: 1;
  
  animation-duration: var(--animate-duration);
  animation-fill-mode: both;

  @if $animationSpeed {
    animation-duration: $animationSpeed;
  }

  @media print, (prefers-reduced-motion: reduce) {
    animation-duration: 1ms !important;
    transition-duration: 1ms !important;
    animation-iteration-count: 1 !important;

    [class*='Out'] {
      opacity: 0;
    }
  }
}

@mixin animated-infinite() {
  animation-iteration-count: infinite;
}

@mixin animated-repeat-1() {
  animation-iteration-count: var(--animate-repeat);
}

@mixin animated-delay($animationSpeed: null) {
  animation-delay: $animationSpeed;
}
@mixin animated-delay-1s() {
  animation-delay: var(--animate-delay);
}

@mixin animated-fast() {
  animation-duration: calc(var(--animate-duration) / 2);
}

@mixin animated-super-fast() {
  animation-duration: calc(var(--animate-duration) / 4);
}

@mixin animated-slow() {
  animation-duration: calc(var(--animate-duration) * 2);
}

// fade-in
@mixin animation-fade-in($opacityStart: 0, $opacityEnd: 1) {
  animation-name: fadeIn;
  
  @keyframes fadeIn {
    from {
      opacity: $opacityStart;
    }
  
    to {
      opacity: $opacityEnd;
    }
  }
}

// fade-out
@mixin animation-fade-out($opacityStart: 1, $opacityEnd: 0) {
  animation-name: fadeOut;

  @keyframes fadeOut {
    from {
      opacity: $opacityStart;
    }
  
    to {
      opacity: $opacityEnd;
    }
  }
}

// fade-in-left
@mixin animation-fade-in-left($opacityStart: 0, $opacityEnd: 1) {
  animation-name: fadeInLeft;

  @keyframes fadeInLeft {
    from {
      opacity: $opacityStart;
      transform: translate3d(-100%, 0, 0);
    }
  
    to {
      opacity: $opacityEnd;
      transform: translate3d(0, 0, 0);
    }
  }
}

// fade-in-right
@mixin animation-fade-in-right($opacityStart: 0, $opacityEnd: 1) {
  animation-name: fadeInRight;

  @keyframes fadeInRight {
    from {
      opacity: $opacityStart;
      transform: translate3d(100%, 0, 0);
    }
  
    to {
      opacity: $opacityEnd;
      transform: translate3d(0, 0, 0);
    }
  }
}

// fade-in-bottom-to-top
@mixin animation-fade-in-bottom-to-top($opacityStart: 0, $opacityEnd: 1) {
  animation-name: fadeInBottomToTop;

  @keyframes fadeInBottomToTop {
    from {
      opacity: $opacityStart;
      transform: translate3d(0, 100%, 0);
    }
  
    to {
      opacity: $opacityEnd;
      transform: translate3d(0, 0, 0);
    }
  }
}

// fade-in-top-to-bottom
@mixin animation-fade-in-top-to-bottom($opacityStart: 0, $opacityEnd: 1) {
  animation-name: fadeInTopToBottom;

  @keyframes fadeInTopToBottom {
    from {
      opacity: $opacityStart;
      transform: translate3d(0, -100%, 0);
    }
  
    to {
      opacity: $opacityEnd;
      transform: translate3d(0, 0, 0);
    }
  }
}

// pulse
@mixin animation-pulse() {
  animation-name: pulse;
  animation-timing-function: ease-in-out;

  @keyframes pulse {
    from {
      transform: scale3d(1, 1, 1);
    }
  
    50% {
      transform: scale3d(1.05, 1.05, 1.05);
    }
  
    to {
      transform: scale3d(1, 1, 1);
    }
  }
}

// slide-out-up
@mixin animation-slide-out-up() {

  animation-name: slideOutUp;

  @keyframes slideOutUp {
    from {
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }

    100% {
      transform: scaleY(1) translate3d(0, -100%, 0);
      opacity: 0;
    }
  }
}

// slide-in-down
@mixin animation-slide-in-down() {
  animation-name: slideInDown;

  @keyframes slideInDown {
    from {
      transform: translate3d(0, -100%, 0);
      visibility: visible;
    }
  
    to {
      transform: translate3d(0, 0, 0);
    }
  }
}

// slide-in-right
@mixin animation-slide-in-right() {
  animation-name: slideInRight;

  @keyframes slideInRight {
    from {
      transform: translate3d(100%, 0, 0);
      visibility: visible;
    }
  
    to {
      transform: translate3d(0, 0, 0);
    }
  }
}

// slide-out-right
@mixin animation-slide-out-right() {
  animation-name: slideOutRight;

  @keyframes slideOutRight {
    from {
      transform: translate3d(0, 0, 0);
    }
  
    to {
      visibility: hidden;
      transform: translate3d(100%, 0, 0);
    }
  }
}

// @todo this is needed? maybe fadein is enough
@mixin animation-opacity() {
  transition: opacity .5s ease 0s;
}
